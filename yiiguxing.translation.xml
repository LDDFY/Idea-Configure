<application>
  <component name="AppStorage">
    <histories>
      <item value="* Marks a constructor, field, setter method, or config method as to be autowired by * Spring's dependency injection facilities. This is an alternative to the JSR-330 * {@link javax.inject.Inject} annotation, adding required-vs-optional semantics." />
      <item value="This class provides thread-local variables. These variables differ from * their normal counterparts in that each thread that accesses one (via its * {@code get} or {@code set} method) has its own, independently initialized * copy of the variable. {@code ThreadLocal} instances are typically private * static fields in classes that wish to associate state with a thread (e.g., * a user ID or Transaction ID)." />
      <item value="capacity" />
      <item value="This interface represents a factory for creating an object." />
      <item value="* A computation to be performed with privileges enabled, that throws one or * more checked exceptions. The computation is performed by invoking * {@code AccessController.doPrivileged} on the * {@code PrivilegedExceptionAction} object. This interface is * used only for computations that throw checked exceptions; * computations that do not throw * checked exceptions should use {@code PrivilegedAction} instead." />
      <item value="* &lt;p&gt; If this thread is blocked in an invocation of the {@link * Object#wait() wait()}, {@link Object#wait(long) wait(long)}, or {@link * Object#wait(long, int) wait(long, int)} methods of the {@link Object} * class, or of the {@link #join()}, {@link #join(long)}, {@link * #join(long, int)}, {@link #sleep(long)}, or {@link #sleep(long, int)}, * methods of this class, then its interrupt status will be cleared and it * will receive an {@link InterruptedException}." />
      <item value="Interrupts this thread." />
      <item value="* &lt;p&gt; Unless the current thread is interrupting itself, which is * always permitted, the {@link #checkAccess() checkAccess} method * of this thread is invoked, which may cause a {@link * SecurityException} to be thrown." />
      <item value="early" />
      <item value="Configure the bean factory with context callbacks." />
      <item value="Prepare the bean factory for use in this context." />
      <item value="* Customize the internal bean factory used by this context. * Called for each {@link #refresh()} attempt. * &lt;p&gt;The default implementation applies this context's * {@linkplain #setAllowBeanDefinitionOverriding &quot;allowBeanDefinitionOverriding&quot;} * and {@linkplain #setAllowCircularReferences &quot;allowCircularReferences&quot;} settings, * if specified. Can be overridden in subclasses to customize any of" />
      <item value="Propagate" />
      <item value="processor" />
      <item value="scanning" />
      <item value="metadata" />
      <item value="Trigger" />
      <item value="// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the // state of the bean before properties are set. This can be used, for example, // to support styles of field injection." />
      <item value="Synthetic" />
      <item value="Delegate" />
      <item value="Kotlin" />
      <item value="populate" />
      <item value="populat" />
      <item value="register Disposable Bean If Necessary" />
      <item value="disposable" />
      <item value="Initialize the given bean instance, applying factory callbacks * as well as init methods and bean post processors." />
      <item value="Allow post-processors to modify the merged bean definition." />
      <item value="* Callback before prototype creation. * &lt;p&gt;The default implementation register the prototype as currently in creation. * @param beanName the name of the prototype about to be created * @see #isPrototypeCurrentlyInCreation" />
      <item value="Guarantee initialization of beans that the current bean depends on." />
      <item value="Privileged" />
      <item value="Eager" />
      <item value="is Eager Init" />
      <item value="Ensure that all non-lazy-init singletons are instantiated, also considering * {@link org.springframework.beans.factory.FactoryBean FactoryBeans}. * Typically invoked at the end of factory setup, if desired. * @throws BeansException if one of the singleton beans could not be created. * Note: This may have left the factory with some beans already initialized! * Call {@link #destroySingletons()} for full cleanup in this case. * @see #destroySingletons()" />
      <item value="Instantiate all remaining (non-lazy-init) singletons." />
      <item value="embedded" />
      <item value="Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early." />
      <item value="Stop using the temporary ClassLoader for type matching." />
      <item value="Separate between BeanPostProcessors that implement PriorityOrdered, // Ordered, and the rest." />
      <item value="temporary" />
      <item value="* Modify the application context's internal bean factory after its standard * initialization. All bean definitions will have been loaded, but no beans * will have been instantiated yet. This allows for registering special * BeanPostProcessors etc in certain ApplicationContext implementations." />
      <item value="Allows post-processing of the bean factory in context subclasses." />
      <item value="Detect" />
      <item value="Weaver" />
      <item value="Load Time Weaver" />
      <item value="detecting" />
      <item value="MessageSource registered (and found for autowiring) as a bean." />
      <item value="BeanFactory interface not registered as resolvable type in a plain factory." />
      <item value="callbacks" />
      <item value="such as the context's ClassLoader and post-processors." />
      <item value="Configure the factory's standard context characteristics," />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="73" />
        <entry key="ENGLISH" value="74" />
        <entry key="FRENCH" value="1" />
        <entry key="ROMANIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>